--[[
	WARNING: Heads up! This script has not been verified by ScriptBlox. Use at your own risk!
]]
local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
   Name = "Bready Hub made by bready2",
   Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
   LoadingTitle = "Awesome Universal hub",
   LoadingSubtitle = "by Bready2",
   ShowText = "Rayfield", -- for mobile users to unhide rayfield, change if you'd like
   Theme = "Default", -- Check https://[Log in to view URL]

   ToggleUIKeybind = "K", -- The keybind to toggle the UI visibility (string like "K" or Enum.KeyCode)

   DisableRayfieldPrompts = false,
   DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface

   ConfigurationSaving = {
      Enabled = true,
      FolderName = nil, -- Create a custom folder for your hub/game
      FileName = "Main script"
   },

   Discord = {
      Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
      Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
      RememberJoins = true -- Set this to false to make them join the discord every time they load it up
   },

   KeySystem = false, -- Set this to true to use our key system
   KeySettings = {
      Title = "Untitled",
      Subtitle = "Key System",
      Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
      FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
      SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
      GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
      Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
   }
})

local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local username = LocalPlayer.Name

local WelcomeTab = Window:CreateTab("ðŸ‘‹ Welcome", nil) -- You can use any icon ID

WelcomeTab:CreateParagraph({
    Title = "Hello, " .. username .. "!",
    Content = "Welcome to the game! Feel free to explore the features in the other tabs.",
})


local MainTab = Window:CreateTab("Main Script", nil) -- Title, Image
local MainSection = MainTab:CreateSection("Player")

Rayfield:Notify({
   Title = "Opened the script :D",
   Content = "Yessir",
   Duration = 5,
   Image = nil,
})

local Button = MainTab:CreateButton({
   Name = "Aimbot (only camera)",
   Callback = function()
      -- Place this LocalScript in StarterPlayerScripts

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local localPlayer = Players.LocalPlayer
local camera = workspace.CurrentCamera

-- Function to get the closest other player
local function getClosestPlayer()
	local closestPlayer = nil
	local shortestDistance = math.huge

	for _, player in pairs(Players:GetPlayers()) do
		if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
			local myPos = localPlayer.Character and localPlayer.Character:FindFirstChild("HumanoidRootPart") and localPlayer.Character.HumanoidRootPart.Position
			local otherPos = player.Character.HumanoidRootPart.Position
			if myPos then
				local distance = (myPos - otherPos).Magnitude
				if distance < shortestDistance then
					shortestDistance = distance
					closestPlayer = player
				end
			end
		end
	end

	return closestPlayer
end

-- Update camera to look at the closest player
RunService.RenderStepped:Connect(function()
	local target = getClosestPlayer()
	if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
		local targetPart = target.Character.HumanoidRootPart
		camera.CFrame = CFrame.new(camera.CFrame.Position, targetPart.Position)
	end
end)

   end,
})

local Slider = MainTab:CreateSlider({
   Name = "WalkSpeed",
   Range = {0, 300},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = 16,
   Flag = "Slider1", -- A flag is the identifier for the configuration file
   Callback = function(Value)
       game.Players.localPlayer.Character.Humanoid.WalkSpeed = (Value)
   end,
})

local Slider = MainTab:CreateSlider({
   Name = "JumpPower",
   Range = {0, 300},
   Increment = 1,
   Suffix = "JumpPower",
   CurrentValue = 50,
   Flag = "Slider1", -- A flag is the identifier for the configuration file
   Callback = function(Value)
        game.Players.LocalPlayer.Character.Humanoid.JumpPower = (Value)
    end,
})

local RunService = game:GetService("RunService")
local player = game.Players.LocalPlayer
local spinSpeed = 0
local rootPart

-- Setup character and HumanoidRootPart
local function setupCharacter()
	local character = player.Character or player.CharacterAdded:Wait()
	rootPart = character:WaitForChild("HumanoidRootPart")
end

if player.Character then
	setupCharacter()
else
	player.CharacterAdded:Connect(setupCharacter)
end

-- Spin loop (runs once)
RunService.RenderStepped:Connect(function(dt)
	if rootPart and spinSpeed > 0 then
		rootPart.CFrame = rootPart.CFrame * CFrame.Angles(0, math.rad(spinSpeed * dt), 0)
	end
end)

-- Your Rayfield Slider
local Slider = MainTab:CreateSlider({
	Name = "SpinBot",
	Range = {0, 2800},
	Increment = 10,
	Suffix = "/s",
	CurrentValue = 0,
	Flag = "Slider1",
	Callback = function(Value)
		spinSpeed = Value
	end,
})

local Button = MainTab:CreateButton({
   Name = "ESP",
   Callback = function()
   local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Function to add highlight to a player's character
local function addESP(player)
	if player == LocalPlayer then return end

	local function highlightCharacter(character)
		if character:FindFirstChild("ESP_Highlight") then return end

		local highlight = Instance.new("Highlight")
		highlight.Name = "ESP_Highlight"
		highlight.FillColor = Color3.fromRGB(255, 0, 0) -- red glow
		highlight.OutlineColor = Color3.fromRGB(255, 255, 255) -- white border
		highlight.FillTransparency = 0.5
		highlight.OutlineTransparency = 0
		highlight.Adornee = character
		highlight.Parent = character
		highlight.DepthMode = Enum.HighlightDepthMode.AlwaysOnTop -- Always visible
	end

	-- If character already exists
	if player.Character then
		highlightCharacter(player.Character)
	end

	-- When character is added
	player.CharacterAdded:Connect(function(character)
		character:WaitForChild("HumanoidRootPart") -- Wait to be sure it's loaded
		highlightCharacter(character)
	end)
end

-- Add ESP to existing players
for _, player in ipairs(Players:GetPlayers()) do
	addESP(player)
end

-- Add ESP when new players join
Players.PlayerAdded:Connect(addESP)
   end,
})

local Slider = MainTab:CreateSlider({
   Name = "Gravity",
   Range = {0, 500}, -- Gravity range (default is 196.2)
   Increment = 1,
   Suffix = "g",
   CurrentValue = 196.2,
   Flag = "GravitySlider",
   Callback = function(value)
       workspace.Gravity = value
   end,
})




local FunTab = Window:CreateTab("ðŸŽ‰ Fun", nil) -- Use any icon ID you like

FunTab:CreateSection("Cursed ahh") -- ðŸ”¥ Section title

FunTab:CreateButton({
    Name = "ðŸ’¥Self Destruction",
    Callback = function()
        local character = game.Players.LocalPlayer.Character
        if character then
            local explosion = Instance.new("Explosion")
            explosion.Position = character:FindFirstChild("HumanoidRootPart").Position
            explosion.BlastRadius = 10
            explosion.BlastPressure = 500000
            explosion.DestroyJointRadiusPercent = 1
            explosion.Parent = workspace
        end
    end,
})

FunTab:CreateButton({
    Name = "ðŸš€Launch Me",
    Callback = function()
        local character = game.Players.LocalPlayer.Character
        local hrp = character and character:FindFirstChild("HumanoidRootPart")
        if hrp then
            local bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.Velocity = Vector3.new(0, 200, 0) -- Strong upward launch
            bodyVelocity.MaxForce = Vector3.new(0, math.huge, 0)
            bodyVelocity.P = 5000
            bodyVelocity.Parent = hrp

            -- Remove after 1 second
            game.Debris:AddItem(bodyVelocity, 1)
        end
    end,
})

local OtherTab = Window:CreateTab("Other", nil) -- Use any icon ID you like

local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Forward dash
local forwardDashDistance = 50
OtherTab:CreateSlider({
    Name = "Forward Teleport Distance",
    Range = {10, 200},
    Increment = 5,
    Suffix = " studs",
    CurrentValue = forwardDashDistance,
    Callback = function(value)
        forwardDashDistance = value
    end,
})

OtherTab:CreateButton({
    Name = "Teleport Forward",
    Callback = function()
        local character = player.Character
        if not character then return end
        local hrp = character:FindFirstChild("HumanoidRootPart")
        if not hrp then return end

        local dashVector = hrp.CFrame.LookVector * forwardDashDistance
        hrp.CFrame = CFrame.new(hrp.Position + dashVector, hrp.Position + dashVector + hrp.CFrame.LookVector)
    end,
})

-- Back dash
local backDashDistance = 30
OtherTab:CreateSlider({
    Name = "Back Teleport distance",
    Range = {10, 200},
    Increment = 5,
    Suffix = " studs",
    CurrentValue = backDashDistance,
    Callback = function(value)
        backDashDistance = value
    end,
})

OtherTab:CreateButton({
    Name = "Teleport Backward",
    Callback = function()
        local character = player.Character
        if not character then return end
        local hrp = character:FindFirstChild("HumanoidRootPart")
        if not hrp then return end

        local dashVector = -hrp.CFrame.LookVector * backDashDistance
        hrp.CFrame = CFrame.new(hrp.Position + dashVector, hrp.Position + dashVector + hrp.CFrame.LookVector)
    end,
})
